// This file was generated by counterfeiter
package volmanfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/voldriver"
	"code.cloudfoundry.org/volman/vollocal"
)

type FakeDriverFactory struct {
	DriverStub        func(logger lager.Logger, driverId string, driverPath, driverFileName string) (voldriver.Driver, error)
	driverMutex       sync.RWMutex
	driverArgsForCall []struct {
		logger         lager.Logger
		driverId       string
		driverPath     string
		driverFileName string
	}
	driverReturns struct {
		result1 voldriver.Driver
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDriverFactory) Driver(logger lager.Logger, driverId string, driverPath string, driverFileName string) (voldriver.Driver, error) {
	fake.driverMutex.Lock()
	fake.driverArgsForCall = append(fake.driverArgsForCall, struct {
		logger         lager.Logger
		driverId       string
		driverPath     string
		driverFileName string
	}{logger, driverId, driverPath, driverFileName})
	fake.recordInvocation("Driver", []interface{}{logger, driverId, driverPath, driverFileName})
	fake.driverMutex.Unlock()
	if fake.DriverStub != nil {
		return fake.DriverStub(logger, driverId, driverPath, driverFileName)
	} else {
		return fake.driverReturns.result1, fake.driverReturns.result2
	}
}

func (fake *FakeDriverFactory) DriverCallCount() int {
	fake.driverMutex.RLock()
	defer fake.driverMutex.RUnlock()
	return len(fake.driverArgsForCall)
}

func (fake *FakeDriverFactory) DriverArgsForCall(i int) (lager.Logger, string, string, string) {
	fake.driverMutex.RLock()
	defer fake.driverMutex.RUnlock()
	return fake.driverArgsForCall[i].logger, fake.driverArgsForCall[i].driverId, fake.driverArgsForCall[i].driverPath, fake.driverArgsForCall[i].driverFileName
}

func (fake *FakeDriverFactory) DriverReturns(result1 voldriver.Driver, result2 error) {
	fake.DriverStub = nil
	fake.driverReturns = struct {
		result1 voldriver.Driver
		result2 error
	}{result1, result2}
}

func (fake *FakeDriverFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.driverMutex.RLock()
	defer fake.driverMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDriverFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vollocal.DriverFactory = new(FakeDriverFactory)

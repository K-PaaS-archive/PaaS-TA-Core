// This file was generated by counterfeiter
package auctioncellrepfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/rep"
	"code.cloudfoundry.org/rep/auctioncellrep"
)

type FakeAuctionCellClient struct {
	StateStub        func(logger lager.Logger) (rep.CellState, bool, error)
	stateMutex       sync.RWMutex
	stateArgsForCall []struct {
		logger lager.Logger
	}
	stateReturns struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}
	stateReturnsOnCall map[int]struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}
	PerformStub        func(logger lager.Logger, work rep.Work) (rep.Work, error)
	performMutex       sync.RWMutex
	performArgsForCall []struct {
		logger lager.Logger
		work   rep.Work
	}
	performReturns struct {
		result1 rep.Work
		result2 error
	}
	performReturnsOnCall map[int]struct {
		result1 rep.Work
		result2 error
	}
	ResetStub        func() error
	resetMutex       sync.RWMutex
	resetArgsForCall []struct{}
	resetReturns     struct {
		result1 error
	}
	resetReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuctionCellClient) State(logger lager.Logger) (rep.CellState, bool, error) {
	fake.stateMutex.Lock()
	ret, specificReturn := fake.stateReturnsOnCall[len(fake.stateArgsForCall)]
	fake.stateArgsForCall = append(fake.stateArgsForCall, struct {
		logger lager.Logger
	}{logger})
	fake.recordInvocation("State", []interface{}{logger})
	fake.stateMutex.Unlock()
	if fake.StateStub != nil {
		return fake.StateStub(logger)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.stateReturns.result1, fake.stateReturns.result2, fake.stateReturns.result3
}

func (fake *FakeAuctionCellClient) StateCallCount() int {
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	return len(fake.stateArgsForCall)
}

func (fake *FakeAuctionCellClient) StateArgsForCall(i int) lager.Logger {
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	return fake.stateArgsForCall[i].logger
}

func (fake *FakeAuctionCellClient) StateReturns(result1 rep.CellState, result2 bool, result3 error) {
	fake.StateStub = nil
	fake.stateReturns = struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuctionCellClient) StateReturnsOnCall(i int, result1 rep.CellState, result2 bool, result3 error) {
	fake.StateStub = nil
	if fake.stateReturnsOnCall == nil {
		fake.stateReturnsOnCall = make(map[int]struct {
			result1 rep.CellState
			result2 bool
			result3 error
		})
	}
	fake.stateReturnsOnCall[i] = struct {
		result1 rep.CellState
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuctionCellClient) Perform(logger lager.Logger, work rep.Work) (rep.Work, error) {
	fake.performMutex.Lock()
	ret, specificReturn := fake.performReturnsOnCall[len(fake.performArgsForCall)]
	fake.performArgsForCall = append(fake.performArgsForCall, struct {
		logger lager.Logger
		work   rep.Work
	}{logger, work})
	fake.recordInvocation("Perform", []interface{}{logger, work})
	fake.performMutex.Unlock()
	if fake.PerformStub != nil {
		return fake.PerformStub(logger, work)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.performReturns.result1, fake.performReturns.result2
}

func (fake *FakeAuctionCellClient) PerformCallCount() int {
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	return len(fake.performArgsForCall)
}

func (fake *FakeAuctionCellClient) PerformArgsForCall(i int) (lager.Logger, rep.Work) {
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	return fake.performArgsForCall[i].logger, fake.performArgsForCall[i].work
}

func (fake *FakeAuctionCellClient) PerformReturns(result1 rep.Work, result2 error) {
	fake.PerformStub = nil
	fake.performReturns = struct {
		result1 rep.Work
		result2 error
	}{result1, result2}
}

func (fake *FakeAuctionCellClient) PerformReturnsOnCall(i int, result1 rep.Work, result2 error) {
	fake.PerformStub = nil
	if fake.performReturnsOnCall == nil {
		fake.performReturnsOnCall = make(map[int]struct {
			result1 rep.Work
			result2 error
		})
	}
	fake.performReturnsOnCall[i] = struct {
		result1 rep.Work
		result2 error
	}{result1, result2}
}

func (fake *FakeAuctionCellClient) Reset() error {
	fake.resetMutex.Lock()
	ret, specificReturn := fake.resetReturnsOnCall[len(fake.resetArgsForCall)]
	fake.resetArgsForCall = append(fake.resetArgsForCall, struct{}{})
	fake.recordInvocation("Reset", []interface{}{})
	fake.resetMutex.Unlock()
	if fake.ResetStub != nil {
		return fake.ResetStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.resetReturns.result1
}

func (fake *FakeAuctionCellClient) ResetCallCount() int {
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	return len(fake.resetArgsForCall)
}

func (fake *FakeAuctionCellClient) ResetReturns(result1 error) {
	fake.ResetStub = nil
	fake.resetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuctionCellClient) ResetReturnsOnCall(i int, result1 error) {
	fake.ResetStub = nil
	if fake.resetReturnsOnCall == nil {
		fake.resetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuctionCellClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	fake.performMutex.RLock()
	defer fake.performMutex.RUnlock()
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAuctionCellClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auctioncellrep.AuctionCellClient = new(FakeAuctionCellClient)

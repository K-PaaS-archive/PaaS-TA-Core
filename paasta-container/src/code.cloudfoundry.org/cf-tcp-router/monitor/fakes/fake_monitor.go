// This file was generated by counterfeiter
package fakes

import (
	"os"
	"sync"

	"code.cloudfoundry.org/cf-tcp-router/monitor"
)

type FakeMonitor struct {
	StartWatchingStub        func()
	startWatchingMutex       sync.RWMutex
	startWatchingArgsForCall []struct{}
	StopWatchingStub         func()
	stopWatchingMutex        sync.RWMutex
	stopWatchingArgsForCall  []struct{}
	RunStub                  func(signals <-chan os.Signal, ready chan<- struct{}) error
	runMutex                 sync.RWMutex
	runArgsForCall           []struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}
	runReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMonitor) StartWatching() {
	fake.startWatchingMutex.Lock()
	fake.startWatchingArgsForCall = append(fake.startWatchingArgsForCall, struct{}{})
	fake.recordInvocation("StartWatching", []interface{}{})
	fake.startWatchingMutex.Unlock()
	if fake.StartWatchingStub != nil {
		fake.StartWatchingStub()
	}
}

func (fake *FakeMonitor) StartWatchingCallCount() int {
	fake.startWatchingMutex.RLock()
	defer fake.startWatchingMutex.RUnlock()
	return len(fake.startWatchingArgsForCall)
}

func (fake *FakeMonitor) StopWatching() {
	fake.stopWatchingMutex.Lock()
	fake.stopWatchingArgsForCall = append(fake.stopWatchingArgsForCall, struct{}{})
	fake.recordInvocation("StopWatching", []interface{}{})
	fake.stopWatchingMutex.Unlock()
	if fake.StopWatchingStub != nil {
		fake.StopWatchingStub()
	}
}

func (fake *FakeMonitor) StopWatchingCallCount() int {
	fake.stopWatchingMutex.RLock()
	defer fake.stopWatchingMutex.RUnlock()
	return len(fake.stopWatchingArgsForCall)
}

func (fake *FakeMonitor) Run(signals <-chan os.Signal, ready chan<- struct{}) error {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		signals <-chan os.Signal
		ready   chan<- struct{}
	}{signals, ready})
	fake.recordInvocation("Run", []interface{}{signals, ready})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(signals, ready)
	} else {
		return fake.runReturns.result1
	}
}

func (fake *FakeMonitor) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeMonitor) RunArgsForCall(i int) (<-chan os.Signal, chan<- struct{}) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].signals, fake.runArgsForCall[i].ready
}

func (fake *FakeMonitor) RunReturns(result1 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMonitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.startWatchingMutex.RLock()
	defer fake.startWatchingMutex.RUnlock()
	fake.stopWatchingMutex.RLock()
	defer fake.stopWatchingMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeMonitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitor.Monitor = new(FakeMonitor)

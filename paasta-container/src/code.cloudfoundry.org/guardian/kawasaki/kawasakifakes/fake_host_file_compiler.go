// This file was generated by counterfeiter
package kawasakifakes

import (
	"net"
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki"
	"code.cloudfoundry.org/lager"
)

type FakeHostFileCompiler struct {
	CompileStub        func(log lager.Logger, containerIp net.IP, handle string) ([]byte, error)
	compileMutex       sync.RWMutex
	compileArgsForCall []struct {
		log         lager.Logger
		containerIp net.IP
		handle      string
	}
	compileReturns struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHostFileCompiler) Compile(log lager.Logger, containerIp net.IP, handle string) ([]byte, error) {
	fake.compileMutex.Lock()
	fake.compileArgsForCall = append(fake.compileArgsForCall, struct {
		log         lager.Logger
		containerIp net.IP
		handle      string
	}{log, containerIp, handle})
	fake.recordInvocation("Compile", []interface{}{log, containerIp, handle})
	fake.compileMutex.Unlock()
	if fake.CompileStub != nil {
		return fake.CompileStub(log, containerIp, handle)
	} else {
		return fake.compileReturns.result1, fake.compileReturns.result2
	}
}

func (fake *FakeHostFileCompiler) CompileCallCount() int {
	fake.compileMutex.RLock()
	defer fake.compileMutex.RUnlock()
	return len(fake.compileArgsForCall)
}

func (fake *FakeHostFileCompiler) CompileArgsForCall(i int) (lager.Logger, net.IP, string) {
	fake.compileMutex.RLock()
	defer fake.compileMutex.RUnlock()
	return fake.compileArgsForCall[i].log, fake.compileArgsForCall[i].containerIp, fake.compileArgsForCall[i].handle
}

func (fake *FakeHostFileCompiler) CompileReturns(result1 []byte, result2 error) {
	fake.CompileStub = nil
	fake.compileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeHostFileCompiler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compileMutex.RLock()
	defer fake.compileMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHostFileCompiler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.HostFileCompiler = new(FakeHostFileCompiler)

// This file was generated by counterfeiter
package kawasakifakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/guardian/kawasaki"
	"code.cloudfoundry.org/lager"
)

type FakeFirewallOpener struct {
	OpenStub        func(log lager.Logger, instance string, rule garden.NetOutRule) error
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		log      lager.Logger
		instance string
		rule     garden.NetOutRule
	}
	openReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFirewallOpener) Open(log lager.Logger, instance string, rule garden.NetOutRule) error {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		log      lager.Logger
		instance string
		rule     garden.NetOutRule
	}{log, instance, rule})
	fake.recordInvocation("Open", []interface{}{log, instance, rule})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub(log, instance, rule)
	} else {
		return fake.openReturns.result1
	}
}

func (fake *FakeFirewallOpener) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeFirewallOpener) OpenArgsForCall(i int) (lager.Logger, string, garden.NetOutRule) {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.openArgsForCall[i].log, fake.openArgsForCall[i].instance, fake.openArgsForCall[i].rule
}

func (fake *FakeFirewallOpener) OpenReturns(result1 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFirewallOpener) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFirewallOpener) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.FirewallOpener = new(FakeFirewallOpener)

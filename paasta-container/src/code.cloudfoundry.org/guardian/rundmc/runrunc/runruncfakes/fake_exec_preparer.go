// Code generated by counterfeiter. DO NOT EDIT.
package runruncfakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/guardian/rundmc/runrunc"
	"code.cloudfoundry.org/lager"
)

type FakeExecPreparer struct {
	PrepareStub        func(log lager.Logger, bundlePath string, spec garden.ProcessSpec) (*runrunc.PreparedSpec, error)
	prepareMutex       sync.RWMutex
	prepareArgsForCall []struct {
		log        lager.Logger
		bundlePath string
		spec       garden.ProcessSpec
	}
	prepareReturns struct {
		result1 *runrunc.PreparedSpec
		result2 error
	}
	prepareReturnsOnCall map[int]struct {
		result1 *runrunc.PreparedSpec
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExecPreparer) Prepare(log lager.Logger, bundlePath string, spec garden.ProcessSpec) (*runrunc.PreparedSpec, error) {
	fake.prepareMutex.Lock()
	ret, specificReturn := fake.prepareReturnsOnCall[len(fake.prepareArgsForCall)]
	fake.prepareArgsForCall = append(fake.prepareArgsForCall, struct {
		log        lager.Logger
		bundlePath string
		spec       garden.ProcessSpec
	}{log, bundlePath, spec})
	fake.recordInvocation("Prepare", []interface{}{log, bundlePath, spec})
	fake.prepareMutex.Unlock()
	if fake.PrepareStub != nil {
		return fake.PrepareStub(log, bundlePath, spec)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.prepareReturns.result1, fake.prepareReturns.result2
}

func (fake *FakeExecPreparer) PrepareCallCount() int {
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	return len(fake.prepareArgsForCall)
}

func (fake *FakeExecPreparer) PrepareArgsForCall(i int) (lager.Logger, string, garden.ProcessSpec) {
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	return fake.prepareArgsForCall[i].log, fake.prepareArgsForCall[i].bundlePath, fake.prepareArgsForCall[i].spec
}

func (fake *FakeExecPreparer) PrepareReturns(result1 *runrunc.PreparedSpec, result2 error) {
	fake.PrepareStub = nil
	fake.prepareReturns = struct {
		result1 *runrunc.PreparedSpec
		result2 error
	}{result1, result2}
}

func (fake *FakeExecPreparer) PrepareReturnsOnCall(i int, result1 *runrunc.PreparedSpec, result2 error) {
	fake.PrepareStub = nil
	if fake.prepareReturnsOnCall == nil {
		fake.prepareReturnsOnCall = make(map[int]struct {
			result1 *runrunc.PreparedSpec
			result2 error
		})
	}
	fake.prepareReturnsOnCall[i] = struct {
		result1 *runrunc.PreparedSpec
		result2 error
	}{result1, result2}
}

func (fake *FakeExecPreparer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.prepareMutex.RLock()
	defer fake.prepareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExecPreparer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runrunc.ExecPreparer = new(FakeExecPreparer)

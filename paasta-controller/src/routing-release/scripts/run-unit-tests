#!/bin/bash

set -e -x

function printStatus {
  if [ $? -eq 0 ]; then
    echo -e "\nSWEET SUITE SUCCESS"
  else
    echo -e "\nSUITE FAILURE"
  fi
}

trap printStatus EXIT

bin_dir=$(dirname $0)/../bin

tmpdir=$(mktemp -d /tmp/cf-routing-downloads.XXXX)

run_go_vet() {
  for component in "$@"
  do
    pushd $component
      # for file in $(find . -name "*.go" -not -iname "*test.go"); do
      #   go tool vet -v -all -shadow=true $file
      # done
      go vet ./...
    popd
  done
}

if uname -a | grep Darwin; then os=darwin; else os=linux; fi

set +e
CONSUL_VERSION=`consul -v | grep 0.6.3`
set -e
if [ "$CONSUL_VERSION" != "Consul v0.6.3" ]; then
  curl -L -o ${tmpdir}/consul-0.6.3.zip "https://releases.hashicorp.com/consul/0.6.3/consul_0.6.3_${os}_amd64.zip"
  unzip -o ${tmpdir}/consul-0.6.3.zip -d ./${bin_dir}
  rm ${tmpdir}/consul-0.6.3.zip
fi

pushd src/github.com/coreos/etcd
  git checkout v2.1.1
  go install .
  git checkout -
popd

export PATH=$PATH:$PWD/bin

go get github.com/onsi/ginkgo/ginkgo
go get github.com/onsi/gomega

if [ -n "$PACKAGE" ]; then
  ginkgo -r -p "$@" "./src/${PACKAGE}"
else
  pushd src/code.cloudfoundry.org/uaa-go-client
  popd

  pushd src/code.cloudfoundry.org
    ginkgo -r -keepGoing -p -trace -randomizeAllSpecs -progress  --nodes 4 \
      "$@" uaa-go-client

    ginkgo -r -keepGoing -p -trace -randomizeAllSpecs -progress --nodes 4 \
      "$@" routing-api routing-api-cli

    ginkgo -r -keepGoing -p -trace -randomizeAllSpecs -progress --nodes 4 \
      "$@" cf-tcp-router tcp-emitter route-registrar

    # Run go vet after ginkgo so that all necessary packages are compiled
    run_go_vet tcp-emitter
  popd

  pushd src/code.cloudfoundry.org/gorouter
    ginkgo -r -p -keepGoing -trace -randomizeAllSpecs -progress --nodes 4 \
      "$@"

    # Installing dependencies needed by go vet
    go install .

    #run_go_vet gorouter
    go vet ./...
    go tool vet --shadow .
  popd
fi

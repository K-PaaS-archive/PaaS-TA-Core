---
<% if_p("router.status.port",
        "router.status.user",
        "router.status.password") do |port, user, password| %>
status:
  port: <%= port %>
  user: <%= user %>
  pass: "<%= password %>"
<% end %>

nats:
<% p("nats.machines").each do |address| %>
  - host: <%= address %>
    port: <%= p("nats.port") %>
    user: <%= p("nats.user") %>
    pass: "<%= p("nats.password") %>"
<% end %>

logging:
  file: /var/vcap/sys/log/gorouter/gorouter.log
  syslog: vcap.gorouter
  level: <%= p("router.logging_level") %>
  loggregator_enabled: true
  metron_address: "localhost:<%=p("metron.port") %>"

tracing:
  enable_zipkin: <%= p("router.tracing.enable_zipkin") %>

port: <%= p("router.port") %>
index: <%= p("router.offset") + spec.index %>
go_max_procs: <%= p("router.number_of_cpus") %>
trace_key: <%= p("router.trace_key") %>
debug_addr: <%= p("router.debug_address") %>
secure_cookies: <%= p("router.secure_cookies") %>

access_log:
  file: /var/vcap/sys/log/gorouter/access.log
  enable_streaming: <%= p("router.enable_access_log_streaming") %>

publish_start_message_interval: 30s
prune_stale_droplets_interval: 30s
droplet_stale_threshold: 120s
publish_active_apps_interval: 0s # 0 means disabled
suspend_pruning_if_nats_unavailable: <%= p("router.suspend_pruning_if_nats_unavailable") %>

oauth:
  token_endpoint: uaa.service.cf.internal
  client_name: "gorouter"
  client_secret: <%= p("uaa.clients.gorouter.secret") %>
  port: <%= p("uaa.ssl.port") %>
  skip_ssl_validation: <%= p("router.ssl_skip_validation") %>
  <% if p("uaa.ca_cert") != "" %>
  ca_certs: "/var/vcap/jobs/gorouter/config/certs/uaa/ca.crt"
  <% end %>

<% if p("routing_api.enabled") %>
routing_api:
  uri: http://routing-api.service.cf.internal
  port: <%= p("routing_api.port") %>
  auth_disabled: <%= p("routing_api.auth_disabled") %>
<% end %>

drain_wait: <%= p("router.drain_wait") %>s
healthcheck_user_agent: <%= p("router.healthcheck_user_agent") %>
endpoint_timeout: <%= p("request_timeout_in_seconds") %>s

start_response_delay_interval: <%= p("router.requested_route_registration_interval_in_seconds") %>s
load_balancer_healthy_threshold: <%= p("router.load_balancer_healthy_threshold") %>s

balancing_algorithm: <%= p("router.balancing_algorithm") %>

enable_ssl: <%= p("router.enable_ssl") %>
skip_ssl_validation: <%= p("router.ssl_skip_validation") %>
ssl_cert_path: /var/vcap/jobs/gorouter/config/cert.pem
ssl_key_path: /var/vcap/jobs/gorouter/config/key.pem
cipher_suites: <%= p("router.cipher_suites") %>

route_services_timeout: <%= p("router.route_services_timeout") %>s
route_services_secret: <%= p("router.route_services_secret") %>
route_services_secret_decrypt_only: <%= p("router.route_services_secret_decrypt_only") %>
route_services_recommend_https: <%= p("router.route_services_recommend_https") %>

extra_headers_to_log: <%= p("router.extra_headers_to_log") %>
token_fetcher_max_retries: 3
token_fetcher_retry_interval: 5s
token_fetcher_expiration_buffer_time: 30
enable_proxy: <%= p("router.enable_proxy") %>
force_forwarded_proto_https: <%= p("router.force_forwarded_proto_https") %>
pid_file: /var/vcap/sys/run/gorouter/gorouter.pid

// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"code.cloudfoundry.org/gorouter/proxy/round_tripper"
)

type FakeProxyRoundTripper struct {
	RoundTripStub        func(*http.Request) (*http.Response, error)
	roundTripMutex       sync.RWMutex
	roundTripArgsForCall []struct {
		arg1 *http.Request
	}
	roundTripReturns struct {
		result1 *http.Response
		result2 error
	}
	CancelRequestStub        func(*http.Request)
	cancelRequestMutex       sync.RWMutex
	cancelRequestArgsForCall []struct {
		arg1 *http.Request
	}
}

func (fake *FakeProxyRoundTripper) RoundTrip(arg1 *http.Request) (*http.Response, error) {
	fake.roundTripMutex.Lock()
	fake.roundTripArgsForCall = append(fake.roundTripArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.roundTripMutex.Unlock()
	if fake.RoundTripStub != nil {
		return fake.RoundTripStub(arg1)
	} else {
		return fake.roundTripReturns.result1, fake.roundTripReturns.result2
	}
}

func (fake *FakeProxyRoundTripper) RoundTripCallCount() int {
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	return len(fake.roundTripArgsForCall)
}

func (fake *FakeProxyRoundTripper) RoundTripArgsForCall(i int) *http.Request {
	fake.roundTripMutex.RLock()
	defer fake.roundTripMutex.RUnlock()
	return fake.roundTripArgsForCall[i].arg1
}

func (fake *FakeProxyRoundTripper) RoundTripReturns(result1 *http.Response, result2 error) {
	fake.RoundTripStub = nil
	fake.roundTripReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeProxyRoundTripper) CancelRequest(arg1 *http.Request) {
	fake.cancelRequestMutex.Lock()
	fake.cancelRequestArgsForCall = append(fake.cancelRequestArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.cancelRequestMutex.Unlock()
	if fake.CancelRequestStub != nil {
		fake.CancelRequestStub(arg1)
	}
}

func (fake *FakeProxyRoundTripper) CancelRequestCallCount() int {
	fake.cancelRequestMutex.RLock()
	defer fake.cancelRequestMutex.RUnlock()
	return len(fake.cancelRequestArgsForCall)
}

func (fake *FakeProxyRoundTripper) CancelRequestArgsForCall(i int) *http.Request {
	fake.cancelRequestMutex.RLock()
	defer fake.cancelRequestMutex.RUnlock()
	return fake.cancelRequestArgsForCall[i].arg1
}

var _ round_tripper.ProxyRoundTripper = new(FakeProxyRoundTripper)

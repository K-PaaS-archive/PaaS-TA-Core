// This file was generated by counterfeiter
package fakesqldriverfakes

import (
	"database/sql/driver"
	"sync"

	"code.cloudfoundry.org/bbs/db/sqldb/fakesqldriver"
)

type FakeStmt struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	NumInputStub        func() int
	numInputMutex       sync.RWMutex
	numInputArgsForCall []struct{}
	numInputReturns     struct {
		result1 int
	}
	ExecStub        func(args []driver.Value) (driver.Result, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		args []driver.Value
	}
	execReturns struct {
		result1 driver.Result
		result2 error
	}
	QueryStub        func(args []driver.Value) (driver.Rows, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		args []driver.Value
	}
	queryReturns struct {
		result1 driver.Rows
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStmt) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeStmt) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeStmt) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStmt) NumInput() int {
	fake.numInputMutex.Lock()
	fake.numInputArgsForCall = append(fake.numInputArgsForCall, struct{}{})
	fake.recordInvocation("NumInput", []interface{}{})
	fake.numInputMutex.Unlock()
	if fake.NumInputStub != nil {
		return fake.NumInputStub()
	} else {
		return fake.numInputReturns.result1
	}
}

func (fake *FakeStmt) NumInputCallCount() int {
	fake.numInputMutex.RLock()
	defer fake.numInputMutex.RUnlock()
	return len(fake.numInputArgsForCall)
}

func (fake *FakeStmt) NumInputReturns(result1 int) {
	fake.NumInputStub = nil
	fake.numInputReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeStmt) Exec(args []driver.Value) (driver.Result, error) {
	var argsCopy []driver.Value
	if args != nil {
		argsCopy = make([]driver.Value, len(args))
		copy(argsCopy, args)
	}
	fake.execMutex.Lock()
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		args []driver.Value
	}{argsCopy})
	fake.recordInvocation("Exec", []interface{}{argsCopy})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(args)
	} else {
		return fake.execReturns.result1, fake.execReturns.result2
	}
}

func (fake *FakeStmt) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeStmt) ExecArgsForCall(i int) []driver.Value {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.execArgsForCall[i].args
}

func (fake *FakeStmt) ExecReturns(result1 driver.Result, result2 error) {
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 driver.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeStmt) Query(args []driver.Value) (driver.Rows, error) {
	var argsCopy []driver.Value
	if args != nil {
		argsCopy = make([]driver.Value, len(args))
		copy(argsCopy, args)
	}
	fake.queryMutex.Lock()
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		args []driver.Value
	}{argsCopy})
	fake.recordInvocation("Query", []interface{}{argsCopy})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(args)
	} else {
		return fake.queryReturns.result1, fake.queryReturns.result2
	}
}

func (fake *FakeStmt) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeStmt) QueryArgsForCall(i int) []driver.Value {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.queryArgsForCall[i].args
}

func (fake *FakeStmt) QueryReturns(result1 driver.Rows, result2 error) {
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 driver.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeStmt) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.numInputMutex.RLock()
	defer fake.numInputMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStmt) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fakesqldriver.Stmt = new(FakeStmt)

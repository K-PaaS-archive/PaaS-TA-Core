#!/bin/bash

trap "echo Exited!; exit 1;" SIGINT SIGTERM

PROJECT_DIR="$(cd "$(dirname "$0")/.."; pwd)"

function print_usage {
    echo "usage: test [subcommand] [ginkgo args]"
    echo
    echo -e "\033[1mSubcommands:\033[0m"
    echo "   all               Run all the tests, excluding linters (default)"
    echo "   build             Build all binaries for the project"
    echo "   cleaners          Run tools that clean the code base"
    echo "   unit              Run the unit tests"
    echo "   integration       Run the integration tests"
    echo "   multiplatform     Run the multiplatform sanity checks"
    echo "   linters           Run common linters against the project"
    echo "   install_tools     Install all necessary binaries for these scripts"
}

function print_checkpoint {
    echo
    bold_blue "==================================  $@"
}

function green {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 2)$1$(tput sgr0)"
    else
        echo ":) $1"
    fi
}

function red {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 1)$1$(tput sgr0)"
    else
        echo ":( $1"
    fi
}

function bold_blue {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 6; tput bold)$1$(tput sgr0)"
    else
        echo "$1"
    fi
}

failure_status=0
function check_output {
    eval "$@"
    local status=$?
    if [[ $status -ne 0 ]]
    then
       failure_status=$status
    fi
}

function run_cleaners {
    print_checkpoint "Running Cleaners"

    if ! which goimports > /dev/null 2>&1; then
        echo installing goimports
        go get golang.org/x/tools/cmd/goimports
    fi
    if ! which misspell > /dev/null 2>&1; then
        echo installing misspell
        go get github.com/client9/misspell/cmd/misspell
    fi
    if ! which unconvert > /dev/null 2>&1; then
        echo installing unconvert
        go get github.com/mdempsky/unconvert
    fi

    local loggregator_pkg="code.cloudfoundry.org/loggregator"
    local loggregator_dir="$(dirname $(dirname $0))/src/$loggregator_pkg"
    echo running goimports
    goimports -w "$loggregator_dir"
    echo running gofmt
    gofmt -s -w "$loggregator_dir"
    echo running misspell
    misspell -w "$loggregator_dir"
    echo running unconvert
    unconvert -v -apply "$loggregator_pkg/..."
    return 0
}

function run_multiplatform {
    print_checkpoint "Running Multi-Platform Checks"
    sed -n -e '/^properties:/,$p' jobs/metron_agent/spec > /tmp/a
    sed -n -e '/^properties:/,$p' jobs/metron_agent_windows/spec > /tmp/b
    diff /tmp/a /tmp/b
    return $?
}

function run_build {
    print_checkpoint "Make Sure Loggregator Packages Compile"
    go build $(go list code.cloudfoundry.org/loggregator/... |
        grep -v integration_test |
        grep -v component_test |
        grep -v lats)
    exit_code=$?
    if [ $exit_code -ne 0 ]; then
        return $exit_code
    fi

    print_checkpoint "Make Sure Loggregator Test Packages Compile"
    go test -run xxxxxxxxxxxxxxxxx code.cloudfoundry.org/loggregator/... > /dev/null
    exit_code=$?
    if [ $exit_code -ne 0 ]; then
        return $exit_code
    fi

    print_checkpoint "Make Sure Tool Packages Compile"
    go build tools/...
    exit_code=$?
    if [ $exit_code -ne 0 ]; then
        return $exit_code
    fi

    print_checkpoint "Make Sure Tool Test Packages Compile"
    go test -run xxxxxxxxxxxxxxxxx tools/... > /dev/null
    exit_code=$?
    if [ $exit_code -ne 0 ]; then
        return $exit_code
    fi

    print_checkpoint "Building Binaries"
    "$(dirname $0)/build"
    return $?
}

function run_unit {
    pushd $PROJECT_DIR/src/tools
        print_checkpoint "Running Tool Unit Tests"
        ginkgo \
            -r \
            --race \
            --tags=~deprecated \
            --randomizeAllSpecs \
            --slowSpecThreshold 20 \
            $@
        exit_code=$?
    popd
    if [ $exit_code -ne 0 ]; then
        return $exit_code
    fi

    pushd $PROJECT_DIR/src/code.cloudfoundry.org/loggregator
        local not_unit_tests="integration_tests,component_tests,lats"
        print_checkpoint "Running Unit Tests"
        # TODO: remove build_etcd once announcer unit tests no longer depend on it
        build_etcd
        ginkgo \
            -r \
            --race \
            --tags=~deprecated \
            --randomizeAllSpecs \
            --slowSpecThreshold 20 \
            --skipPackage="$not_unit_tests" \
            $@
        exit_code=$?
   popd
   return $exit_code
}

function run_integration {
    print_checkpoint "Running Integration Tests"
    build_etcd
    pushd $PROJECT_DIR/src/code.cloudfoundry.org/loggregator
        ginkgo \
            -r \
            --race \
            --tags=~deprecated \
            --randomizeAllSpecs \
            --slowSpecThreshold 20 \
            $@ \
            integration_tests \
            $(find . -name component_tests -type d)
        exit_code=$?
   popd
   return $exit_code
}

function run_all {
    check_output run_cleaners
    check_output run_build
    check_output run_multiplatform
    check_output run_unit $@
    check_output run_integration $@
    return $failure_status
}

function parse_argc {
    command=run_all
    if [[ $# -eq 0 ]]
    then
        return
    fi

    arg=$1
    case "$arg" in
        -h|-help|--help|help)
            print_usage
            exit 0
            ;;
        all|unit|integration|build|cleaners|multiplatform|linters|install_tools)
            command=run_$arg
            ;;
        *)
            echo "Invalid command: $arg\n"
            print_usage
            exit 1
            ;;
    esac
}

function build_etcd {
    if which etcd > /dev/null 2>&1; then
        return
    fi

    echo "building etcd"

    pushd $PROJECT_DIR/src/github.com/coreos/etcd > /dev/null
        ORG_PATH="github.com/coreos"
        REPO_PATH="${ORG_PATH}/etcd"
        export ETCD_GOPATH=${PWD}/gopath

        rm -f $ETCD_GOPATH/src/${REPO_PATH}
        mkdir -p $ETCD_GOPATH/src/${ORG_PATH}
        ln -s ${PWD} $ETCD_GOPATH/src/${REPO_PATH}

        eval $(go env)

        GIT_SHA=`git rev-parse --short HEAD || echo "GitNotFound"`

        # Static compilation is useful when etcd is run in a container
        GOPATH=$ETCD_GOPATH CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-s -X ${REPO_PATH}/version.GitSHA=${GIT_SHA}" -o bin/etcd ${REPO_PATH}
        GOPATH=$ETCD_GOPATH CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-s" -o bin/etcdctl ${REPO_PATH}/etcdctl
    popd > /dev/null

    mv $PROJECT_DIR/src/github.com/coreos/etcd/bin/etcd $PROJECT_DIR/bin/etcd
}

function run_install_tools {
    print_checkpoint "Installing Tools"

    # testing
    go get github.com/onsi/ginkgo/ginkgo

    # cleaners
    go get golang.org/x/tools/cmd/goimports
    go get github.com/client9/misspell/cmd/misspell
    go get github.com/mdempsky/unconvert

    # linters
    go get github.com/tsenart/deadcode
    go get github.com/golang/lint/golint
    go get github.com/opennota/check/cmd/aligncheck
    go get github.com/opennota/check/cmd/structcheck
    go get github.com/opennota/check/cmd/varcheck
    go get github.com/kisielk/errcheck
    go get github.com/gordonklaus/ineffassign
    go get github.com/mvdan/interfacer/cmd/interfacer
    go get honnef.co/go/tools/cmd/megacheck
}

function run_linters {
    print_checkpoint "Running Linters"

    local loggregator_pkg
    if [ "$1" = "" ]; then
        loggregator_pkg="code.cloudfoundry.org/loggregator"
    else
        loggregator_pkg="$1"
    fi
    local loggregator_dir="$(dirname $(dirname $0))/src/$loggregator_pkg"

    echo running go vet
    go vet "$loggregator_pkg/..."
    echo running deadcode
    deadcode $dir
    echo running golint
    golint "$loggregator_pkg/..."
    echo running aligncheck
    aligncheck "$loggregator_pkg/..."
    echo running structcheck
    structcheck "$loggregator_pkg/..."
    echo running varcheck
    varcheck "$loggregator_pkg/..."
    echo running errcheck
    errcheck "$loggregator_pkg/..."
    echo running ineffassign
    ineffassign "$loggregator_dir"
    echo running interfacer
    interfacer "$loggregator_pkg/..."
    echo running megacheck
    megacheck "$loggregator_pkg/..."

    return 0
}

function setup_env {
    export PATH="$PROJECT_DIR/bin:$PATH"
    export GORACE="halt_on_error=1"
}

function main {
    setup_env
    parse_argc $1
    shift
    "$command" $@
    result=$?
    if [[ $result -eq 0 ]]
    then
        green "SWEET SUITE SUCCESS"
    else
        red "SUITE FAILURE"
    fi
    exit $result
}

main $@

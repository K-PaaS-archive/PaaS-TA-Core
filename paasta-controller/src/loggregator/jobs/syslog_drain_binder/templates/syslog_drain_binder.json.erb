<%
    etcd_machines = p("loggregator.etcd.machines").map do |addr|
        schema = if p('loggregator.etcd.require_ssl')
                     'https'
                 else
                     'http'
                 end
        "#{schema}://#{addr}:4001"
    end

    etcd_tls_client_config = {
        "KeyFile" => "/var/vcap/jobs/syslog_drain_binder/config/certs/etcd-client.key",
        "CertFile" => "/var/vcap/jobs/syslog_drain_binder/config/certs/etcd-client.crt",
        "CAFile" => "/var/vcap/jobs/syslog_drain_binder/config/certs/etcd-ca.crt"
    }
    cc_tls_config = {
        "KeyFile" => "/var/vcap/jobs/syslog_drain_binder/config/certs/syslogdrainbinder.key",
        "CertFile" => "/var/vcap/jobs/syslog_drain_binder/config/certs/syslogdrainbinder.crt",
        "CAFile" => "/var/vcap/jobs/syslog_drain_binder/config/certs/mutual_tls_ca.crt"
    }

    args = {
        "DisableSyslogDrains" => p("loggregator.disable_syslog_drains"),
        "InstanceName" => "#{name}.#{spec.index}",
        "DrainUrlTtlSeconds" => p("syslog_drain_binder.drain_url_ttl_seconds"),
        "UpdateIntervalSeconds" => p("syslog_drain_binder.update_interval_seconds"),
        "EtcdMaxConcurrentRequests" => p("loggregator.etcd.maxconcurrentrequests"),
        "EtcdUrls" => etcd_machines,
        "EtcdRequireTLS" => p("loggregator.etcd.require_ssl"),
        "MetronAddress" => "#{p("metron_endpoint.host")}:#{p("metron_endpoint.dropsonde_port")}",
        "CloudControllerAddress" => "https://#{p('cc.internal_service_hostname')}:#{p('cc.tls_port')}",
        "CloudControllerTLSConfig" => cc_tls_config,
        "PollingBatchSize" => p("syslog_drain_binder.polling_batch_size"),
        "SkipCertVerify" => p("ssl.skip_cert_verify"),
    }
    if_p("loggregator.etcd.require_ssl") do |_|
        args[:EtcdTLSClientConfig] = etcd_tls_client_config
    end
%>
<%= JSON.pretty_generate(args) %>

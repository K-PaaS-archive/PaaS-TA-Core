$Error.Clear()

try {
  if (![bool](Test-WSMan -ErrorAction SilentlyContinue)) {
    Enable-PSRemoting -Force
  }

  $RUN_DIR="C:\var\vcap\sys\run\consul-test-consumer-windows"
  $LOG_DIR="C:\var\vcap\sys\log\consul-test-consumer-windows"
  $PKG_DIR="C:\var\vcap\packages\acceptance-tests-windows"

  New-Item -ItemType Directory -Force -Path "${RUN_DIR}"
  New-Item -ItemType Directory -Force -Path "${LOG_DIR}"
  New-Item -ItemType Directory -Force -Path "${PKG_DIR}"
} catch {
    Write-Error "Exception (consul-test-consumer-windows): pre-start.ps1"
    Write-Error $_.Exception.Message
    Exit 1
}

Install-WindowsFeature DSC-Service
<% if !p("consul-test-consumer.nameserver").empty? %>

  # Not Implemented:
  #  - echo "options timeout:30" >> "${resolvconf_file}"

  $nameserver=<%= p("consul-test-consumer.nameserver") %>

  Configuration ConsulWindows {
    Node "localhost" {

      Script SetupDNS {
        SetScript = {
          [array]$routeable_interfaces = Get-WmiObject Win32_NetworkAdapterConfiguration | Where { $_.IpAddress -AND ($_.IpAddress | Where { $addr = [Net.IPAddress] $_; $addr.AddressFamily -eq "InterNetwork" -AND ($addr.address -BAND ([Net.IPAddress] "255.255.0.0").address) -ne ([Net.IPAddress] "169.254.0.0").address }) }
          $ifindex = $routeable_interfaces[0].Index
          $interface = (Get-WmiObject Win32_NetworkAdapter | Where { $_.DeviceID -eq $ifindex }).netconnectionid

          $currentDNS = ((Get-DnsClientServerAddress -InterfaceAlias $interface) | where { $_.AddressFamily -eq [System.Net.Sockets.AddressFamily]::InterNetwork }).ServerAddresses

          # Insert new record at index 1 matching behavior of:
          #
          #   `sed -i -e "2i nameserver $nameserver" "${resolvconf_file}"`
          #
          $newDNS = $currentDNS[0] + @("${nameserver}") + $currentDNS[1..$currentDNS.length]

          Set-DnsClientServerAddress -InterfaceAlias $interface -ServerAddresses ($newDNS -join ",")
        }
        GetScript = {
          return $false
        }
        TestScript = {
          [array]$routeable_interfaces = Get-WmiObject Win32_NetworkAdapterConfiguration | Where { $_.IpAddress -AND ($_.IpAddress | Where { $addr = [Net.IPAddress] $_; $addr.AddressFamily -eq "InterNetwork" -AND ($addr.address -BAND ([Net.IPAddress] "255.255.0.0").address) -ne ([Net.IPAddress] "169.254.0.0").address }) }
          $ifindex = $routeable_interfaces[0].Index
          $interface = (Get-WmiObject Win32_NetworkAdapter | Where { $_.DeviceID -eq $ifindex }).netconnectionid

          if((Get-DnsClientServerAddress -InterfaceAlias $interface -AddressFamily ipv4 -ErrorAction Stop).ServerAddresses[0] -eq "${nameserver}")
          {
            Write-Verbose -Message "DNS Servers are set correctly."
            return $true
          }
          else
          {
            Write-Verbose -Message "DNS Servers not yet correct."
            return $false
          }
        }
      }

      Script ClearDNSCache
      {
          SetScript = {
              Clear-DnsClientCache
          }
          GetScript = {
              Get-DnsClientCache
          }
          TestScript = {
              @(Get-DnsClientCache).Count -eq 0
          }
      }

      Registry DisableDNSNegativeCache
      {
          Ensure = "Present"
          Key = "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Dnscache\Parameters"
          ValueName = "MaxNegativeCacheTtl"
          ValueType = "DWord"
          ValueData = "0"
      }
    }
  }

  ConsulWindows
  Start-DscConfiguration -Wait -Path .\ConsulWindows -Force -Verbose

<% end %>

  Configuration SetupFirewall {
    Node "localhost" {

      Script SetupFirewall
      {
        TestScript = {
          $status = (Get-NetFirewallRule -Name CFAllowConsulConsumer -ErrorAction Ignore).PrimaryStatus
          return ($status -eq "OK")
        }
        SetScript = {
          $admins = New-Object System.Security.Principal.NTAccount("Administrators")
          $adminsSid = $admins.Translate([System.Security.Principal.SecurityIdentifier])

          $LocalUser = "D:(A;;CC;;;$adminsSid)"
          $otherAdmins = Get-WmiObject win32_groupuser |
            Where-Object { $_.GroupComponent -match 'administrators' } |
            ForEach-Object { [wmi]$_.PartComponent }

          foreach($admin in $otherAdmins)
          {
            $ntAccount = New-Object System.Security.Principal.NTAccount($admin.Name)
            $sid = $ntAccount.Translate([System.Security.Principal.SecurityIdentifier]).Value
            $LocalUser = $LocalUser + "(A;;CC;;;$sid)"
          }
          New-NetFirewallRule -Name CFAllowConsulConsumer -Description "Allow Consul-Consumer" `
            -DisplayName "Allow Consul-Consumer" -Protocol TCP -LocalPort 6769 -Action allow -LocalUser $LocalUser
        }
        GetScript = { Get-NetFirewallProfile }
      }
    }
  }

  SetupFirewall
  Start-DscConfiguration -Wait -Path .\SetupFirewall -Force -Verbose

if ($Error) {
    Write-Host "Error summary:"
    foreach($ErrorMessage in $Error)
    {
      Write-Host $ErrorMessage
    }
    Exit 1
}

Exit 0
